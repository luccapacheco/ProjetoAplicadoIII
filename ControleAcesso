/*
   --------------------------------------------------------------------------------------------------------------------
  Exemplo de  um controle de acesso de porta Arduino com RFID, EEPROM, relé. 
 
   -------------------------------------------------- ---------------------------------------------------------- 
 
   Este é um exemplo de biblioteca MFRC522. Mostra um sistema completo de controle de acesso à porta. 

                                     +---------+
  +----------------------------------->Leitura das TAGS+^------------------------------------------+
  |                              +-------------------------------+                                 |
  |                              |                               |                                 |
  |                              |                               |                                 |
  |                         +----v-----+        +----------------v----------------------+          |
  |                         |MASTER TAG|                   |Outras TAGS|                           |
  |                         +--+-------+        ++--------------------------------------+          |
  |                            |                          |                           |            |
  |                            |                          |                           |            |
  |                      +-----v---+                 +----v----+               +------v------+     |
  |         +------------+Leitura TAGS+------+    | TAG Conhecida|           | TAG Desconhecida|   |
  |         |            +-+-------+         |        +------------+        +-------------------+  |
  |         |              |                 |                |                       |            |
  |    +----v-----+   +----v----+         +--v--------+        +-v----------+  +------v------+     |
  |    |MASTER TAG|   |TAG Conhecida|   |TAG Desconhecida|     |Acesso Garrantido|  |Acesso Negado||
  |    +----------+   +---+-----+          +-----+-----+          +-----+------+     +-----+-----+ |
  |                       |                  |                  |               |                  |
  |       +----+     +----v------+        +--v---+              |               +--------------->  |
  +-------+EXIT|     |DELETAR DA|         |ADD A |              |                                  |
          +----+     |  EEPROM   |        |EEPROM|              |                                  |
                     +-----------+        +------+              +-------------------------------+  |


 Use um cartão Master que atua como Programador, então você poderá escolher os titulares do cartão que terão acesso ou não

 * **Interface de usuário fácil**

   Apenas uma TAG RFID é necessária para excluir ou adicionar outras TAGS. Você pode optar por usar Leds para saída ou módulo LCD serial para informar os usuários.

 * **Armazena informações na EEPROM**

   Informações armazenadas na memória EEPROM não volátil do Arduino para preservar a tag do usuário e o Master Card. Nenhuma informação é perdida
   se houver falta de energia. A EEPROM tem ciclo de leitura ilimitado, mas aproximadamente 100.000 ciclos de gravação limitados.

 * **Segurança**
   Para simplificar, usaremos IDs exclusivos da tag. 

   Layout de pino típico usado:
   ---------------------------------------------------------------------------------------------------------
               MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino     ESP32
               Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
   Signal      Pin          Pin           Pin       Pin        Pin              Pin
   ---------------------------------------------------------------------------------------------------------
   RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST         2
   SPI SS      SDA(SS)      10            53        D10        10               10          5
   SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16          23
   SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14          19
   SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15          18
*/

#include <EEPROM.h>     // Vamos ler e escrever UIDs do PICC de/para EEPROM
#include <SPI.h>        // Módulo RC522 usa protocolo SPI
#include <MFRC522.h>  // Biblioteca para dispositivos Mifare RC522
/*
 Em vez de um relé você pode querer usar um servo. Servos também podem travar e destravar fechaduras de portas
  O relé será usado por padrão.
*/

// #include <Servo.h>

/*
  Para visualizar o que está acontecendo no hardware, precisamos de alguns leds e para controlar a fechadura da porta, um relé e um botão de limpeza
  (ou algum outro hardware) Led de ânodo comum usado, digitalWriting HIGH desliga o led Lembre-se de que se você estiver indo
  para usar led catódico comum ou apenas leds separados, basta comentar #define COMMON_ANODE,
*/

#define COMMON_ANODE

#ifdef COMMON_ANODE
#define LED_ON LOW
#define LED_OFF HIGH
#else
#define LED_ON HIGH
#define LED_OFF LOW
#endif

constexpr uint8_t redLed = 27;   // Definir pinos de LED
constexpr uint8_t greenLed = 26;
constexpr uint8_t blueLed = 25;

constexpr uint8_t relay = 13;     // Definir pino de relé
constexpr uint8_t wipeB = 33;     // Pino de botão para WipeMode

boolean match = false;          // inicializar correspondência de cartão para falso
boolean programMode = false;  // inicializar o modo de programação para falso
boolean replaceMaster = false;

uint8_t successRead;      // Variável inteira a ser mantido se tivermos leitura bem-sucedida do leitor

byte storedCard[4];     // Armazena um ID lido da EEPROM
byte readCard[4];      // Armazena ID digitalizada lida no Módulo RFID
byte masterCard[4];   // Armazena o ID do cartão mestre lido na EEPROM

                                    // Crie uma instância MFRC522.
constexpr uint8_t RST_PIN = 2;     // Configurável, veja o layout típico dos pinos acima
constexpr uint8_t SS_PIN = 5;     // Configurável, veja o layout típico dos pinos acima

MFRC522 mfrc522(SS_PIN, RST_PIN);

///////////////////////////////////////// Setup ///////////////////////////////////
void setup() {
  EEPROM.begin(1024);

                                    //Configuração Pinos Arduino 
  pinMode(redLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  pinMode(blueLed, OUTPUT);
  pinMode(wipeB, INPUT_PULLUP);          // Habilite o resistor pull up do pino
  pinMode(relay, OUTPUT);
                                       // Tenha cuidado com o comportamento do circuito de relé ao reiniciar ou desligar e ligar seu Arduino
  digitalWrite(relay, LOW);           // Certifique-se de que a porta esteja trancada
  digitalWrite(redLed, LED_OFF);     // Certifique-se de que o led esteja desligado
  digitalWrite(greenLed, LED_OFF);  // Certifique-se de que o led esteja desligado
  digitalWrite(blueLed, LED_OFF);  // Certifique-se de que o led esteja desligado

                           // Configuração de Protocolo
  Serial.begin(9600);     // Inicialize as comunicações seriais com o PC
  SPI.begin();           // Hardware MFRC522 usa protocolo SPI
  mfrc522.PCD_Init();   // Inicializar hardware MFRC522

  //Se você definir o ganho da antena como máximo, aumentará a distância de leitura
  //mfrc522.PCD_SetAntennaGain(mfrc522.RxGain_max);

  Serial.println(F("Controle de Acesso v0.1"));   // Para fins de depuração
  ShowReaderDetails();  // Mostrar detalhes do leitor de cartão PCD - MFRC522

  //Wipe Code - Se o botão (wipeB) for pressionado durante a execução da configuração (ligado), ele limpa a EEPROM
  if (digitalRead(wipeB) == LOW) {  // quando o botão pressionado, o pino deve ficar baixo, o botão conectado ao terra
    digitalWrite(redLed, LED_ON); // Led vermelho permanece aceso para informar ao usuário que iremos limpar
    Serial.println(F("Botao de formatação apertado"));
    Serial.println(F("V10 segundos para cancelar"));
    Serial.println(F("Apagar todos os seus registros? Não tem como desfazer!"));
    bool buttonState = monitorWipeButton(10000); // Dê ao usuário tempo suficiente para cancelar a operação
    if (buttonState == true && digitalRead(wipeB) == LOW) {    // Se o botão ainda estiver pressionado, limpe a EEPROM
      Serial.println(F("Inicio da formatacao da EEPROM"));
      for (uint16_t x = 0; x < EEPROM.length(); x = x + 1) {    //Fim do loop do endereço EEPROM
        if (EEPROM.read(x) == 0) {              //If EEPROM address 0
          // não faça nada, já está claro, vá para o próximo endereço para economizar tempo e reduzir gravações na EEPROM
        }
        else {
          EEPROM.write(x, 0);       // se não escrever 0 para limpar, leva 3,3mS
        }
      }
      Serial.println(F("EEPROM formatada com sucesso"));
      digitalWrite(redLed, LED_OFF);  // visualize uma limpeza bem-sucedida
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
      delay(200);
      digitalWrite(redLed, LED_ON);
      delay(200);
      digitalWrite(redLed, LED_OFF);
    }
    else {
      Serial.println(F("Formatacao cancelada")); // Mostre algum feedback de que o botão de limpeza não foi pressionado por 15 segundos
      digitalWrite(redLed, LED_OFF);
    }
  }
  // Verifique se o cartão mestre está definido, se não, deixe o usuário escolher um cartão mestre
  // Isso também é útil apenas para redefinir o Master Card
  // Você pode manter outros registros EEPROM, basta escrever diferente de 143 no endereço EEPROM 1
  // O endereço EEPROM 1 deve conter o número mágico que é '143'
  if (EEPROM.read(1) != 143) {
    Serial.println(F("TAG Mestre nao definido"));
    Serial.println(F("Leia um chip para definir TAG Mestre"));
    do {
      successRead = getID();            // define sucessoRead como 1 quando somos lidos pelo leitor, caso contrário, 0
      digitalWrite(blueLed, LED_ON);    // Visualize TAG Mestre precisa ser definido
      delay(200);
      digitalWrite(blueLed, LED_OFF);
      delay(200);
    }
    while (!successRead);                  // O programa não irá mais longe enquanto você não obtiver uma leitura bem-sucedida
    for ( uint8_t j = 0; j < 4; j++ ) {        // Faça um loop 4 vezes
      EEPROM.write( 2 + j, readCard[j] );  // Grave o UID do PICC digitalizado na EEPROM, comece no endereço 3
    }
    EEPROM.write(1, 143);                  // Escreva para a EEPROM que definimos TAG Mestre.
    Serial.println(F("TAG Mestre definido"));
  }
  Serial.println(F("-------------------"));
  Serial.println(F("UID do TAG Mestre"));
  for ( uint8_t i = 0; i < 4; i++ ) {          // Leia o UID do TAG Mestre da EEPROM
    masterCard[i] = EEPROM.read(2 + i);    // Escreva para masterCard
    Serial.print(masterCard[i], HEX);
  }
  Serial.println("");
  Serial.println(F("-------------------"));
  Serial.println(F("Tudo esta OK!"));
  Serial.println(F("Aguardando pelas TAG's para serem lidos"));
  cycleLeds();    // Tudo pronto, vamos dar algum feedback ao usuário alternando os LEDs

  EEPROM.commit();
}


///////////////////////////////////////// Main Loop ///////////////////////////////////
void loop () {
  do {
    successRead = getID();  // define sucessoRead como 1 quando somos lidos pelo leitor, caso contrário, 0
                           // Quando o dispositivo estiver em uso, se o botão de limpeza for pressionado por 10 segundos, inicializa a limpeza do Master Card
    if (digitalRead(wipeB) == LOW) {   // Verifique se o botão está pressionado
                                      // Visualiza que a operação normal é interrompida pressionando o botão de limpeza Vermelho é como mais Aviso ao usuário
      digitalWrite(redLed, LED_ON);  // Certifique-se de que o led esteja desligado
      digitalWrite(greenLed, LED_OFF);  // Certifique-se de que o led esteja desligado
      digitalWrite(blueLed, LED_OFF);  // Certifique-se de que o led esteja desligado
                                      // Dê algum feedback
      Serial.println(F("Botao de formatacao apertado"));
      Serial.println(F("O TAG Mestre sera apagado! em 10 segundos"));
      bool buttonState = monitorWipeButton(10000);                // Dê ao usuário tempo suficiente para cancelar a operação
      if (buttonState == true && digitalRead(wipeB) == LOW) {    //Se o botão ainda estiver pressionado, limpe a EEPROM
        EEPROM.write(1, 0);                                     // Redefinir o número mágico.
        EEPROM.commit();
        Serial.println(F("TAG Mestre desvinculado do dispositivo"));
        Serial.println(F("Aperte o reset da placa para reprogramar o TAG Mestre"));
        while (1);
      }
      Serial.println(F("Desvinculo da TAG Mestre cancelado"));
    }
    if (programMode) {
      cycleLeds();              // O modo de programa alterna entre Vermelho Verde Azul aguardando para ler um novo cartão
    }
    else {
      normalModeOn();     // Normal mode, blue Power LED is on, all others are off
    }
  }
  while (!successRead);   //the program will not go further while you are not getting a successful read
  if (programMode) {
    if ( isMaster(readCard) ) { //When in program mode check First If master card scanned again to exit program mode
      Serial.println(F("Leitura do cartao Mestre"));
      Serial.println(F("Saindo do modo de programacao"));
      Serial.println(F("-----------------------------"));
      programMode = false;
      return;
    }
    else {
      if ( findID(readCard) ) { // If scanned card is known delete it
        Serial.println(F("Conheco este chip, removendo..."));
        deleteID(readCard);
        Serial.println("-----------------------------");
        Serial.println(F("Leia um chip para adicionar ou remover da EEPROM"));
      }
      else {                    // If scanned card is not known add it
        Serial.println(F("Nao conheco este chip, incluindo..."));
        writeID(readCard);
        Serial.println(F("-----------------------------"));
        Serial.println(F("Leia um chip para adicionar ou remover da EEPROM"));
      }
    }
  }
  else {
    if ( isMaster(readCard)) {    // If scanned card's ID matches Master Card's ID - enter program mode
      programMode = true;
      Serial.println(F("Ola Mestre - Modo de programacao iniciado"));
      uint8_t count = EEPROM.read(0);   // Read the first Byte of EEPROM that
      Serial.print(F("Existem "));     // stores the number of ID's in EEPROM
      Serial.print(count);
      Serial.print(F(" registro(s) na EEPROM"));
      Serial.println("");
      Serial.println(F("Leia um chip para adicionar ou remover da EEPROM"));
      Serial.println(F("Leia o cartao Mestre novamente para sair do modo de programacao"));
      Serial.println(F("-----------------------------"));
    }
    else {
      if ( findID(readCard) ) { // If not, see if the card is in the EEPROM
        Serial.println(F("Bem-vindo, voce pode passar"));
        granted(300);         // Open the door lock for 300 ms
      }
      else {      // If not, show that the ID was not valid
        Serial.println(F("Voce nao pode passar"));
        denied();
      }
    }
  }
}

/////////////////////////////////////////  Access Granted    ///////////////////////////////////
void granted ( uint16_t setDelay) {
  digitalWrite(blueLed, LED_OFF);   // Turn off blue LED
  digitalWrite(redLed, LED_OFF);  // Turn off red LED
  digitalWrite(greenLed, LED_ON);   // Turn on green LED
  digitalWrite(relay, HIGH);     // Unlock door!
  delay(setDelay);          // Hold door lock open for given seconds
  digitalWrite(relay, LOW);    // Relock door
  delay(1000);            // Hold green LED on for a second
}

///////////////////////////////////////// Access Denied  ///////////////////////////////////
void denied() {
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  digitalWrite(redLed, LED_ON);   // Turn on red LED
  delay(1000);
}


///////////////////////////////////////// Get PICC's UID ///////////////////////////////////
uint8_t getID() {
  // Getting ready for Reading PICCs
  if ( ! mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
    return 0;
  }
  if ( ! mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
    return 0;
  }
  // There are Mifare PICCs which have 4 byte or 7 byte UID care if you use 7 byte PICC
  // I think we should assume every PICC as they have 4 byte UID
  // Until we support 7 byte PICCs
  Serial.println(F("UID do chip lido:"));
  for ( uint8_t i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(readCard[i], HEX);
  }
  Serial.println("");
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

void ShowReaderDetails() {
  // Get the MFRC522 software version
  byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);
  Serial.print(F("Versao do software MFRC522: 0x"));
  Serial.print(v, HEX);
  if (v == 0x91)
    Serial.print(F(" = v1.0"));
  else if (v == 0x92)
    Serial.print(F(" = v2.0"));
  else
    Serial.print(F(" (desconhecido),provavelmente um clone chines?"));
  Serial.println("");
  // When 0x00 or 0xFF is returned, communication probably failed
  if ((v == 0x00) || (v == 0xFF)) {
    Serial.println(F("ALERTA: Falha na comunicacao, o modulo MFRC522 esta conectado corretamente?"));
    Serial.println(F("SISTEMA ABORTADO: Verifique as conexoes."));
    // Visualize system is halted
    digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
    digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
    digitalWrite(redLed, LED_ON);   // Turn on red LED
    while (true); // do not go further
  }
}

///////////////////////////////////////// Cycle Leds (Program Mode) ///////////////////////////////////
void cycleLeds() {
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  digitalWrite(greenLed, LED_ON);   // Make sure green LED is on
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  delay(200);
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  digitalWrite(blueLed, LED_ON);  // Make sure blue LED is on
  delay(200);
  digitalWrite(redLed, LED_ON);   // Make sure red LED is on
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  delay(200);
}

//////////////////////////////////////// Normal Mode Led  ///////////////////////////////////
void normalModeOn () {
  digitalWrite(blueLed, LED_ON);  // Blue LED ON and ready to read card
  digitalWrite(redLed, LED_OFF);  // Make sure Red LED is off
  digitalWrite(greenLed, LED_OFF);  // Make sure Green LED is off
  digitalWrite(relay, LOW);    // Make sure Door is Locked
}

//////////////////////////////////////// Read an ID from EEPROM //////////////////////////////
void readID( uint8_t number ) {
  uint8_t start = (number * 4 ) + 2;    // Figure out starting position
  for ( uint8_t i = 0; i < 4; i++ ) {     // Loop 4 times to get the 4 Bytes
    storedCard[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
  }
}

///////////////////////////////////////// Add ID to EEPROM   ///////////////////////////////////
void writeID( byte a[] ) {
  if ( !findID( a ) ) {     // Before we write to the EEPROM, check to see if we have seen this card before!
    uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
    uint8_t start = ( num * 4 ) + 6;  // Figure out where the next slot starts
    num++;                // Increment the counter by one
    EEPROM.write( 0, num );     // Write the new count to the counter
    for ( uint8_t j = 0; j < 4; j++ ) {   // Loop 4 times
      EEPROM.write( start + j, a[j] );  // Write the array values to EEPROM in the right position
    }
    EEPROM.commit();
    successWrite();
    Serial.println(F("ID adicionado na EEPROM com sucesso"));
  }
  else {
    failedWrite();
    Serial.println(F("Erro! Tem alguma coisa errada com o ID do chip ou problema na EEPROM"));
  }
}

///////////////////////////////////////// Remove ID from EEPROM   ///////////////////////////////////
void deleteID( byte a[] ) {
  if ( !findID( a ) ) {     // Before we delete from the EEPROM, check to see if we have this card!
    failedWrite();      // If not
    Serial.println(F("Erro! Tem alguma coisa errada com o ID do chip ou problema na EEPROM"));
  }
  else {
    uint8_t num = EEPROM.read(0);   // Get the numer of used spaces, position 0 stores the number of ID cards
    uint8_t slot;       // Figure out the slot number of the card
    uint8_t start;      // = ( num * 4 ) + 6; // Figure out where the next slot starts
    uint8_t looping;    // The number of times the loop repeats
    uint8_t j;
    uint8_t count = EEPROM.read(0); // Read the first Byte of EEPROM that stores number of cards
    slot = findIDSLOT( a );   // Figure out the slot number of the card to delete
    start = (slot * 4) + 2;
    looping = ((num - slot) * 4);
    num--;      // Decrement the counter by one
    EEPROM.write( 0, num );   // Write the new count to the counter
    for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
      EEPROM.write( start + j, EEPROM.read(start + 4 + j));   // Shift the array values to 4 places earlier in the EEPROM
    }
    for ( uint8_t k = 0; k < 4; k++ ) {         // Shifting loop
      EEPROM.write( start + j + k, 0);
    }
    EEPROM.commit();
    successDelete();
    Serial.println(F("ID removido da EEPROM com sucesso"));
  }
}

///////////////////////////////////////// Check Bytes   ///////////////////////////////////
boolean checkTwo ( byte a[], byte b[] ) {
  if ( a[0] != 0 )      // Make sure there is something in the array first
    match = true;       // Assume they match at first
  for ( uint8_t k = 0; k < 4; k++ ) {   // Loop 4 times
    if ( a[k] != b[k] )     // IF a != b then set match = false, one fails, all fail
      match = false;
  }
  if ( match ) {      // Check to see if if match is still true
    return true;      // Return true
  }
  else  {
    return false;       // Return false
  }
}

///////////////////////////////////////// Find Slot   ///////////////////////////////////
uint8_t findIDSLOT( byte find[] ) {
  uint8_t count = EEPROM.read(0);       // Read the first Byte of EEPROM that
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
    readID(i);                // Read an ID from EEPROM, it is stored in storedCard[4]
    if ( checkTwo( find, storedCard ) ) {   // Check to see if the storedCard read from EEPROM
      // is the same as the find[] ID card passed
      return i;         // The slot number of the card
      break;          // Stop looking we found it
    }
  }
}

///////////////////////////////////////// Find ID From EEPROM   ///////////////////////////////////
boolean findID( byte find[] ) {
  uint8_t count = EEPROM.read(0);     // Read the first Byte of EEPROM that
  for ( uint8_t i = 1; i <= count; i++ ) {    // Loop once for each EEPROM entry
    readID(i);          // Read an ID from EEPROM, it is stored in storedCard[4]
    if ( checkTwo( find, storedCard ) ) {   // Check to see if the storedCard read from EEPROM
      return true;
      break;  // Stop looking we found it
    }
    else {    // If not, return false
    }
  }
  return false;
}

///////////////////////////////////////// Write Success to EEPROM   ///////////////////////////////////
// Flashes the green LED 3 times to indicate a successful write to EEPROM
void successWrite() {
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is on
  delay(200);
  digitalWrite(greenLed, LED_ON);   // Make sure green LED is on
  delay(200);
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  delay(200);
  digitalWrite(greenLed, LED_ON);   // Make sure green LED is on
  delay(200);
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  delay(200);
  digitalWrite(greenLed, LED_ON);   // Make sure green LED is on
  delay(200);
}

///////////////////////////////////////// Write Failed to EEPROM   ///////////////////////////////////
// Flashes the red LED 3 times to indicate a failed write to EEPROM
void failedWrite() {
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  delay(200);
  digitalWrite(redLed, LED_ON);   // Make sure red LED is on
  delay(200);
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  delay(200);
  digitalWrite(redLed, LED_ON);   // Make sure red LED is on
  delay(200);
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  delay(200);
  digitalWrite(redLed, LED_ON);   // Make sure red LED is on
  delay(200);
}

///////////////////////////////////////// Success Remove UID From EEPROM  ///////////////////////////////////
// Flashes the blue LED 3 times to indicate a success delete to EEPROM
void successDelete() {
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  digitalWrite(redLed, LED_OFF);  // Make sure red LED is off
  digitalWrite(greenLed, LED_OFF);  // Make sure green LED is off
  delay(200);
  digitalWrite(blueLed, LED_ON);  // Make sure blue LED is on
  delay(200);
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  delay(200);
  digitalWrite(blueLed, LED_ON);  // Make sure blue LED is on
  delay(200);
  digitalWrite(blueLed, LED_OFF);   // Make sure blue LED is off
  delay(200);
  digitalWrite(blueLed, LED_ON);  // Make sure blue LED is on
  delay(200);
}

////////////////////// Check readCard IF is masterCard   ///////////////////////////////////
// Check to see if the ID passed is the master programing card
boolean isMaster( byte test[] ) {
  if ( checkTwo( test, masterCard ) )
    return true;
  else
    return false;
}

bool monitorWipeButton(uint32_t interval) {
  uint32_t now = (uint32_t)millis();
  while ((uint32_t)millis() - now < interval)  {
    // check on every half a second
    if (((uint32_t)millis() % 500) == 0) {
      if (digitalRead(wipeB) != LOW)
        return false;
    }
  }
  return true;
}
